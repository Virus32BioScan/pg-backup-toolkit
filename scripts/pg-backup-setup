#!/usr/bin/env bash
set -euo pipefail
ask(){ local p="$1" d="${2:-}"; local v; if [ -n "$d" ]; then read -rp "$p [$d]: " v || true; printf "%s" "${v:-$d}"; else read -rp "$p: " v || true; printf "%s" "$v"; fi; }
valid_time(){ [[ "$1" =~ ^([01]?[0-9]|2[0-3]):[0-5][0-9]$ ]]; }
norm(){ local o=() t; for t in $1; do if valid_time "$t"; then IFS=: read -r H M <<<"$t"; printf -v H "%02d" "$H"; o+=("${H}:${M}"); fi; done; printf "%s
" "${o[*]}"; }
[ -f /etc/pg-backup.conf ] && . /etc/pg-backup.conf || true
PGHOST="${PGHOST:-127.0.0.1}"; PGPORT="${PGPORT:-5432}"; PGUSER="${PGUSER:-postgres}"; COMPRESS="${COMPRESS:-zstd}"; BACKUP_DIR_BASE="${BACKUP_DIR:-/backups/postgres}"; LOG_DIR_BASE="${LOG_DIR:-/var/log/pg-backup}"
PGHOST="$(ask PGHOST "$PGHOST")"; PGPORT="$(ask PGPORT "$PGPORT")"; PGUSER="$(ask PGUSER "$PGUSER")"
MAIL_TO="$(ask MAIL_TO "")"; MAIL_FROM="$(ask MAIL_FROM "")"
COMPRESS="$(ask COMPRESS "$COMPRESS")"; BACKUP_DIR_BASE="$(ask BACKUP_DIR "$BACKUP_DIR_BASE")"; LOG_DIR_BASE="$(ask LOG_DIR "$LOG_DIR_BASE")"
install -m 0640 -o root -g pgbackup /dev/stdin /etc/pg-backup.conf <<EOF
PGHOST="${PGHOST}"
PGPORT="${PGPORT}"
PGUSER="${PGUSER}"
MAIL_TO="${MAIL_TO}"
MAIL_FROM="${MAIL_FROM}"
COMPRESS="${COMPRESS}"
BACKUP_DIR="${BACKUP_DIR_BASE}"
LOG_DIR="${LOG_DIR_BASE}"
EOF
mkprof(){ local prof="$1" exc="$2" jobs="$3" keep="$4" grecip="$5"
install -m 0640 -o root -g pgbackup /dev/stdin "/etc/pg-backup.d/${prof}.conf" <<EOF
PROFILE_NAME="${prof}"
INCLUDE_DBS=""
EXCLUDE_DBS="${exc}"
JOBS="${jobs}"
KEEP_DAYS="${keep}"
COMPRESS="${COMPRESS}"
ENCRYPT_GPG="false"
GPG_RECIPIENT="${grecip}"
BACKUP_DIR="${BACKUP_DIR_BASE}/${prof}"
LOG_DIR="${LOG_DIR_BASE}"
EOF
mkdir -p "${BACKUP_DIR_BASE}/${prof}" "${LOG_DIR_BASE}"; chown -R pgbackup:pgbackup "${BACKUP_DIR_BASE}/${prof}" "${LOG_DIR_BASE}" || true; chmod 750 "${BACKUP_DIR_BASE}/${prof}" "${LOG_DIR_BASE}" || true
}
mkprof nightly "template0 template1 postgres" 4 30 ""
mkprof hourly  "template0 template1" 2 7 ""
mkprof weekend "template0 template1" 6 90 "backup@example.com"
ntimes="$(norm "$(ask "Nightly HH:MM list" "01:00 05:00")")"
wtimes="$(norm "$(ask "Weekend HH:MM list" "03:30")")"
hint="$(ask "Hourly interval min" "60")"
{ echo "[Unit]"; echo "Description=PG backups (nightly)"; echo; echo "[Timer]"; for t in $ntimes; do echo "OnCalendar=*-*-* ${t}:00"; done; echo "RandomizedDelaySec=300"; echo "Persistent=true"; echo "AccuracySec=1min"; echo; echo "[Install]"; echo "WantedBy=timers.target"; } > /etc/systemd/system/pg-backup@nightly.timer
{ echo "[Unit]"; echo "Description=PG backups (weekend)"; echo; echo "[Timer]"; for t in $wtimes; do echo "OnCalendar=Sat,Sun *-*-* ${t}:00"; done; echo "RandomizedDelaySec=600"; echo "Persistent=true"; echo "AccuracySec=1min"; echo; echo "[Install]"; echo "WantedBy=timers.target"; } > /etc/systemd/system/pg-backup@weekend.timer
{ echo "[Unit]"; echo "Description=PG backups (hourly every ${hint} min)"; echo; echo "[Timer]"; echo "OnBootSec=${hint}min"; echo "OnUnitActiveSec=${hint}min"; echo "AccuracySec=1min"; echo "Persistent=true"; echo; echo "[Install]"; echo "WantedBy=timers.target"; } > /etc/systemd/system/pg-backup@hourly.timer
systemctl daemon-reload || true
echo "Done. Enable timers as needed."
